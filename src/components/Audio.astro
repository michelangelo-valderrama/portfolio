---
import { Play, Pause } from 'lucide'
import LucideIcon from '@/components/LucideIcon.astro'
import Slider from './Slider.astro'

interface Props {
  audio: string
  title: string
  time?: string
  class?: string
}

const { audio, title, time } = Astro.props

const [id] = audio.split('.')
const img = `img/${id}.webp`
---

<div
  data-id={id}
  class:list={[
    'flex flex-col gap-y-2 text-[8px] md:text-2xs font-mono w-[160px] md:w-[200px]',
    Astro.props.class
  ]}
>
  <audio data-id={id} src={`/audio/${audio}`}></audio>
  <div class="relative">
    <div class="relative z-10 transition duration-500 delay-500" audio-image>
      <span
        class="absolute top-0 left-0 py-1 pl-2 pr-3 bg-background rounded-tl-md rounded-br-xl z-10"
        >{title}</span
      >
      <img
        src={img}
        alt={`${title} cover`}
        width="600"
        height="600"
        class="size-full aspect-square rounded-md relative"
        decoding="async"
        loading="lazy"
      />
    </div>
    <div
      audio-vinil
      class="absolute top-1/2 -translate-y-1/2 z-0 size-[90%] transition-transform duration-500 delay-500"
    >
      <img
        class="relative transition ease-linear duration-500 aspect-square"
        src="/img/vinyl.webp"
        alt="Vinil image"
        width="360"
        height="360"
        decoding="async"
        loading="lazy"
      />
    </div>
  </div>
  <div>
    <div class="flex justify-between text-foreground/80 text-xs mb-1">
      <span current-time>0:00</span>
      <span total-time>{time}</span>
    </div>
    <input progress-bar type="range" min="0" max="100" step="1" value="0" />
    <div class="flex justify-center mt-1">
      <button
        play-btn
        type="button"
        class="flex items-center justify-center size-8 rounded-full bg-white text-background"
        aria-label="Play"
      >
        <div play-icon>
          <LucideIcon icon={Play} class="size-4 fill-current" />
          <span class="sr-only">Play</span>
        </div>
        <div pause-icon>
          <LucideIcon icon={Pause} class="size-4 fill-current" />
          <span class="sr-only">Pause</span>
        </div>
      </button>
    </div>
  </div>
</div>

<style>
  :global([data-playing='true']) [play-icon] {
    display: none;
  }
  :global([data-playing='true']) [pause-icon] {
    display: inline-block;
  }
  :global([data-playing='false']) [play-icon] {
    display: inline-block;
  }
  :global([data-playing='false']) [pause-icon] {
    display: none;
  }

  :global([data-pos='0']) [audio-image] {
    transform: translateX(-25%);
  }

  :global([data-pos='0']) [audio-vinil] {
    transform: translateY(-50%) translateX(40%);
  }

  input {
    --c: hsl(var(--foreground)); /* active color */
    --g: 2px; /* the gap */
    --l: 4px; /* line thickness*/
    --s: 10px; /* thumb size*/

    width: 100%;
    height: var(--s); /* needed for Firefox*/
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
    background: none;
    cursor: pointer;
    overflow: hidden;
  }
  input:focus-visible,
  /* chromium */
  input[type='range' i]::-webkit-slider-thumb {
    height: var(--s);
    aspect-ratio: 1;
    border-radius: 50%;
    box-shadow: 0 0 0 var(--s, var(--l)) inset var(--c);
    border-image: linear-gradient(90deg, var(--c) 50%, #3d3d3d 0) 0 1 /
      calc(50% - var(--l) / 2) 100vw/0 calc(100vw + var(--g));
    -webkit-appearance: none;
    appearance: none;
    transition: 0.3s;
  }
  /* Firefox */
  input[type='range']::-moz-range-thumb {
    height: var(--s);
    width: var(--s);
    background: none;
    border-radius: 50%;
    box-shadow: 0 0 0 var(--s, var(--l)) inset var(--c);
    border-image: linear-gradient(90deg, var(--c) 50%, #3d3d3d 0) 0 1 /
      calc(50% - var(--l) / 2) 100vw/0 calc(100vw + var(--g));
    -moz-appearance: none;
    appearance: none;
    transition: 0.3s;
  }
</style>

<script>
  import { $, $$ } from '@/lib/utils'

  const $carousel = $<HTMLDivElement>('#carousel')
  const $audios = $$<HTMLAudioElement>('audio')!

  function formatTime(time: number) {
    if (!time) return null

    const minutes = Math.floor(time / 60)
    const seconds = Math.floor(time % 60)

    return `${minutes}:${seconds.toString().padStart(2, '0')}`
  }

  for (const $audio of $audios) {
    let isPlaying = false

    const audioId = $audio.dataset.id!,
      $playBtn = document.querySelector<HTMLButtonElement>(
        `[data-id="${audioId}"] [play-btn]`
      )!,
      $currentTime = document.querySelector<HTMLSpanElement>(
        `[data-id="${audioId}"] [current-time]`
      )!,
      $totalTime = document.querySelector<HTMLSpanElement>(
        `[data-id="${audioId}"] [total-time]`
      )!,
      $progressBar = document.querySelector<HTMLInputElement>(
        `[data-id="${audioId}"] [progress-bar]`
      )!,
      $audioVinil = document.querySelector<HTMLImageElement>(
        `[data-id="${audioId}"] [audio-vinil] > img`
      )!

    $currentTime.textContent = '0:00'
    const totalTime = formatTime($audio.duration)
    if (totalTime) $totalTime.textContent = totalTime

    $playBtn.addEventListener('click', () => {
      if ($audio.paused) $audio.play()
      else $audio.pause()

      isPlaying = !isPlaying
      $carousel.dataset.playing = `${isPlaying}`
    })

    $audio.addEventListener('timeupdate', () => {
      const { currentTime: ct, duration } = $audio

      $currentTime.textContent = formatTime(ct) ?? '0:00'
      $totalTime.textContent = formatTime(duration) ?? '0:00'

      const progress = (ct / duration) * 100
      $progressBar.value = `${progress}`

      $audioVinil.style.transform = `rotate(${(ct % 360) * 100}deg)`
    })

    $audio.addEventListener('ended', () => {
      isPlaying = false
      $carousel.dataset.playing = `${isPlaying}`
    })

    $carousel.addEventListener('rotate', () => {
      $audio.pause()
      $audio.currentTime = 0
      isPlaying = false
      $carousel.dataset.playing = `${isPlaying}`
    })

    $progressBar.addEventListener('input', () => {
      const { value } = $progressBar
      const seekTo = (+value / 100) * $audio.duration
      $audio.currentTime = seekTo
    })
  }
</script>
